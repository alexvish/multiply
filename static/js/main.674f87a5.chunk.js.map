{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["randomOperation","operation","a","b","op","Math","floor","random","MainTable","className","RandomTable","rows","result","i","push","randomOperations","useParams","map","r","operations","o","dangerouslySetInnerHTML","__html","App","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAuBA,SAASA,EAAgBC,GACvB,IAAIC,EAAEC,EAAEC,EAoBR,MAnBkB,QAAdH,GACFC,EAAIG,KAAKC,MAAM,EAAoB,EAAdD,KAAKE,UAC1BJ,EAAIE,KAAKC,MAAM,EAAoB,EAAdD,KAAKE,UACtBF,KAAKE,SAAW,GAClBH,EAAK,iBAELF,GAAQC,EACRC,EAAK,mBAGPF,EAAIG,KAAKC,MAAM,EAAoB,EAAdD,KAAKE,UAC1BJ,EAAIE,KAAKC,MAAM,EAAoB,EAAdD,KAAKE,UACtBF,KAAKE,SAAW,GAClBH,EAAK,2BAELF,GAAMC,EACNC,EAAK,kBAGH,GAAN,OAAUF,GAAV,OAAcE,GAAd,OAAmBD,GAWrB,IAAMK,EAAsB,WAC1B,OACE,2BAAOC,UAAU,OACf,+BACA,4BACE,4BACE,kBAAC,EAAD,OAEF,4BACE,kBAAC,EAAD,QAIJ,4BACE,4BACE,kBAAC,EAAD,OAEF,4BACE,kBAAC,EAAD,WASJC,EAAwB,WAAO,IAG7BC,EAtCR,SAA0BP,GAExB,IADA,IAAIQ,EAAS,GACJC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAOE,KAAK,CAACd,EAAgBI,GAAKJ,EAAgBI,GAAKJ,EAAgBI,KAEzE,OAAOQ,EAgCKG,CADDC,cAANZ,IAEYa,KAAK,SAAAC,GACpB,IAAIC,EAAaD,EAAED,KAAK,SAAAG,GAAC,OACf,oCACC,wBAAIX,UAAU,cAAcY,wBAAyB,CAACC,OAAOF,KAC7D,wBAAIX,UAAU,iBAEzB,OACE,4BACGU,MAMP,OAAQ,2BAAOV,UAAU,eACvB,+BACGE,KAMQY,EAnGO,WACpB,OAAO,oCACL,kBAAC,IAAD,KACE,sFACA,kBAAC,IAAD,CAAMC,GAAI,SAAV,yCAFF,QAGE,kBAAC,IAAD,CAAMA,GAAI,QAAV,8BACA,6BAJF,gRAKE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAM,OAAQC,UAAWlB,IAChC,kBAAC,IAAD,CAAOiB,KAAM,IAAKC,UAAWlB,QCLjBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.674f87a5.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  HashRouter as Router,\n  Link, Route, Switch,\n  useParams\n} from 'react-router-dom';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return <>\n    <Router>\n      <h1>Умножалка</h1>\n      <Link to={'/mult'}>Умн/Дел</Link> &nbsp;\n      <Link to={'/add'}>Cл/Выч</Link>\n      <br/>Распечатать, разрезать, решать по 1 карточке в минуту.\n      <Switch>\n        <Route path={'/:op'} component={MainTable}/>\n        <Route path={'/'} component={MainTable}/>\n      </Switch>\n    </Router>\n  </>;\n};\n\nfunction randomOperation(operation:string): string {\n  let a,b,op;\n  if (operation === 'add') {\n    a = Math.floor(1.0 + Math.random()*9);\n    b = Math.floor(1.0 + Math.random()*9);\n    if (Math.random() < 0.5) {\n      op = '&nbsp;+&nbsp;'\n    } else {\n      a = a + b;\n      op = '&nbsp;-&nbsp;'\n    }\n  } else {\n    a = Math.floor(2.0 + Math.random()*8);\n    b = Math.floor(2.0 + Math.random()*8);\n    if (Math.random() < 0.5) {\n      op = '&nbsp;&centerdot;&nbsp;'\n    } else {\n      a = a*b;\n      op = '&nbsp;:&nbsp;'\n    }\n  }\n  return `${a}${op}${b}`\n}\n\nfunction randomOperations(op:string): string[][] {\n  let result = [];\n  for (let i = 0; i < 10; i++) {\n    result.push([randomOperation(op), randomOperation(op), randomOperation(op)])\n  }\n  return result;\n}\n\nconst MainTable: React.FC = () => {\n  return (\n    <table className=\"App\">\n      <tbody>\n      <tr>\n        <td>\n          <RandomTable />\n        </td>\n        <td>\n          <RandomTable/>\n        </td>\n      </tr>\n\n      <tr>\n        <td>\n          <RandomTable/>\n        </td>\n        <td>\n          <RandomTable/>\n        </td>\n      </tr>\n\n      </tbody>\n    </table>\n  );\n};\n\nconst RandomTable: React.FC = () => {\n  let {op} = useParams();\n  const ops = randomOperations(op);\n  const rows = ops.map( r => {\n    let operations = r.map( o =>\n             (<>\n               <td className=\"op inner-td\" dangerouslySetInnerHTML={{__html:o}}></td>\n               <td className=\"inner-td\"></td>\n             </>));\n    return (\n      <tr>\n        {operations}\n      </tr>\n    );\n  });\n\n\n  return (<table className=\"randomTable\">\n    <tbody>\n      {rows}\n    </tbody>\n  </table>)\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}